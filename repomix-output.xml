This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
public/
  vite.svg
src/
  assets/
    react.svg
  API.js
  App.css
  App.jsx
  CastCard.jsx
  ContentList.jsx
  FullSchedule.jsx
  Header.jsx
  index.css
  main.jsx
  MainComponent.jsx
  MovieCard.jsx
  Search.jsx
  SingleMoviePage.jsx
  Sort.jsx
  Test.jsx
.gitignore
eslint.config.js
index.html
package.json
README.md
vite.config.js
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="src/CastCard.jsx">
import * as React from 'react';
import AspectRatio from '@mui/joy/AspectRatio';
import Avatar from '@mui/joy/Avatar';
import Box from '@mui/joy/Box';
import Card from '@mui/joy/Card';
import IconButton from '@mui/joy/IconButton';
import Typography from '@mui/joy/Typography';
import Link from '@mui/joy/Link';


const CastCard = ({ castMember }) => {
    return (
        <Box sx={{ minHeight: 350 }}>
            <Card
                variant="outlined"
                sx={(theme) => ({
                    width: 300,
                    gridColumn: 'span 2',
                    flexDirection: 'row',
                    flexWrap: 'wrap',
                    resize: 'horizontal',
                    overflow: 'hidden',
                    gap: 'clamp(0px, (100% - 360px + 32px) * 999, 16px)',
                    transition: 'transform 0.3s, border 0.3s',
                    '&:hover': {
                        borderColor: theme.vars.palette.primary.outlinedHoverBorder,
                        transform: 'translateY(-2px)',
                    },
                    '& > *': { minWidth: 'clamp(0px, (360px - 100%) * 999,100%)' },
                })}
            >

                <Box
                    sx={{ display: 'flex', flexDirection: 'column', gap: 2, maxWidth: 200 }}
                >
                    <Box sx={{ display: 'flex' }}>
                        <div>
                            <Typography level="title-lg">
                                <Link
                                    href={castMember.person.url}
                                    overlay
                                    underline="none"
                                    sx={{
                                        color: 'text.primary',
                                        '&.Mui-focusVisible:after': { outlineOffset: '-4px' },
                                    }}
                                >
                                    {castMember.character.name}
                                </Link>
                            </Typography>

                        </div>
                        <IconButton
                            size="sm"
                            variant="plain"
                            color="neutral"
                            sx={{ ml: 'auto', alignSelf: 'flex-start' }}
                        >

                        </IconButton>
                    </Box>
                    <AspectRatio
                        variant="soft"
                        sx={{
                            '--AspectRatio-paddingBottom':
                                'clamp(0px, (100% - 200px) * 999, 200px)',
                            pointerEvents: 'none',
                        }}
                    >
                        <img
                            alt=""
                            src={castMember.person.image.original}
                        />
                    </AspectRatio>
                    <Box sx={{ display: 'flex', gap: 1.5, mt: 'auto' }}>

                        <div>
                            <Typography level="body-xs">Played by</Typography>
                            <Typography level="body-sm">{castMember.person.name}</Typography>

                        </div>
                    </Box>
                </Box>
            </Card>
        </Box>
    );
}

export default CastCard
</file>

<file path="public/vite.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>
</file>

<file path="src/assets/react.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>
</file>

<file path="src/API.js">
import axios from "axios";

const newApi = axios.create({
    baseURL: 'https://api.tvmaze.com'
});
export const getMovieById = (show_id) => {

    return newApi.get(`/shows/${show_id}`).then(({ data }) => {
        return data
    })
}

export const getCastById = (show_id) => {

    return newApi.get(`/shows/${show_id}/cast`).then(({ data }) => {
        return data
    })
}
</file>

<file path="src/FullSchedule.jsx">
import { useState, useEffect } from "react";


function FullSchedule() {
    const [schedules, setShedules] = useState([])
    const [showSchedule, setShowSchedule] = useState(false)


    useEffect(() => {
        if (!showSchedule) return;
        fetch(`https://api.tvmaze.com/schedule/web?date=2025-03-25`).then((response) => {
            return (response.json())
        }).then((data) => {
            if (!data || data.length === 0) {
                return Promise.reject({ message: 'Something went wrong' })
            }
            setShedules(data)
        }).catch((err) => {

        })
    }, [showSchedule]);

    const handleClick = (event) => {
        event.preventDefault();
        setShowSchedule(true)

    }
    return (
        <>
            <button onClick={handleClick}>
                Click me to see today's streaming shows !

            </button>
            <ul>
                {schedules.map((schedule) => (
                    <li key={schedule.id}>
                        <a href={schedule.url} target="_blank" >
                            {schedule.name} - Season {schedule.season}
                        </a>
                    </li>
                ))}
            </ul>



        </>
    )
}
export default FullSchedule
</file>

<file path="src/SingleMoviePage.jsx">
import { useParams } from "react-router-dom";
import { useState, useEffect } from 'react'

import { getMovieById, getCastById } from './API'
import Grid from '@mui/joy/Grid';
import CastCard from './CastCard'

const SingleMoviePage = () => {
    const { show_id } = useParams();
    const [movie, setSingleMovie] = useState([]);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState(null);
    const [cast, setCast] = useState([])


    useEffect(() => {

        getMovieById(show_id)
            .then((movie) => {
                console.log(movie)
                setSingleMovie(movie);

                setIsLoading(false);

            }).catch((err) => {
                setIsLoading(false);
                setError(err);
                console.log(err)
            })
    }, []);
    useEffect(() => {

        getCastById(show_id)
            .then((cast) => {

                setCast(cast);
                console.log(cast)

                setIsLoading(false);

            }).catch((err) => {
                setIsLoading(false);
                setError(err);
                console.log(err)
            })
    }, []);


    if (isLoading) {
        return (
            <section className="loading">
                <p>Loading... please wait </p>
            </section>
        )
    }

    if (error) {

        return (
            <p>sorry...an error has occured</p>
        )

    }



    return (

        <div className="relative isolate overflow-hidden bg-gray-900 py-24 sm:py-32">
            <img
                alt=""
                src={movie.image.original}
                className="absolute inset-0 -z-10 size-full object-cover object-right md:object-center"
            />

            <div
                aria-hidden="true"
                className="hidden sm:absolute sm:-top-10 sm:right-1/2 sm:-z-10 sm:mr-10 sm:block sm:transform-gpu sm:blur-3xl"
            >
                <div
                    style={{
                        clipPath:
                            'polygon(74.1% 44.1%, 100% 61.6%, 97.5% 26.9%, 85.5% 0.1%, 80.7% 2%, 72.5% 32.5%, 60.2% 62.4%, 52.4% 68.1%, 47.5% 58.3%, 45.2% 34.5%, 27.5% 76.7%, 0.1% 64.9%, 17.9% 100%, 27.6% 76.8%, 76.1% 97.7%, 74.1% 44.1%)',
                    }}
                    className="aspect-1097/845 w-[68.5625rem] bg-linear-to-tr from-[#ff4694] to-[#776fff] opacity-20"
                />
            </div>
            <div
                aria-hidden="true"
                className="absolute -top-52 left-1/2 -z-10 -translate-x-1/2 transform-gpu blur-3xl sm:top-[-28rem] sm:ml-16 sm:translate-x-0 sm:transform-gpu"
            >
                <div
                    style={{
                        clipPath:
                            'polygon(74.1% 44.1%, 100% 61.6%, 97.5% 26.9%, 85.5% 0.1%, 80.7% 2%, 72.5% 32.5%, 60.2% 62.4%, 52.4% 68.1%, 47.5% 58.3%, 45.2% 34.5%, 27.5% 76.7%, 0.1% 64.9%, 17.9% 100%, 27.6% 76.8%, 76.1% 97.7%, 74.1% 44.1%)',
                    }}
                    className="aspect-1097/845 w-[68.5625rem] bg-linear-to-tr from-[#ff4694] to-[#776fff] opacity-20"
                />
            </div>
            <div className="mx-auto max-w-7xl px-6 lg:px-8 ">
                <div className="mx-auto max-w-2xl lg:mx-0">
                    <h2 className="text-5xl font-semibold tracking-tight text-white sm:text-7xl">{movie.name}</h2>
                    <p className="mt-8 text-lg font-medium text-pretty text-black-300 sm:text-xl/8 bg-[white] size-fit">
                        Genre: {movie.genres}
                    </p>
                    <p className="mt-8 text-lg font-medium text-pretty text-black-300 sm:text-xl/8 bg-[white] size-fit">
                        Rating: {movie.rating.average}
                    </p>
                </div>

            </div>
            <Grid container spacing={5} sx={{ mt: 2 }}>
                {cast.map((castMember) => (
                    <Grid xs={11} sm={6} md={4} lg={3} key={castMember.character.id}>
                        <CastCard castMember={castMember} />
                    </Grid>
                ))}
            </Grid>

        </div>


    )
}

export default SingleMoviePage
</file>

<file path="src/Test.jsx">
const Test = () => {
    return (
        <h2>Please help me </h2>
    )
}


export default Test
</file>

<file path=".gitignore">
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
</file>

<file path="eslint.config.js">
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'

export default [
  { ignores: ['dist'] },
  {
    files: ['**/*.{js,jsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...js.configs.recommended.rules,
      ...reactHooks.configs.recommended.rules,
      'no-unused-vars': ['error', { varsIgnorePattern: '^[A-Z_]' }],
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
]
</file>

<file path="index.html">
<!doctype html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <link rel="icon" type="image/svg+xml" href="/vite.svg" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>TV Maze</title>
</head>

<body>
  <div id="root"></div>
  <script type="module" src="/src/main.jsx"></script>
</body>

</html>
</file>

<file path="vite.config.js">
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import tailwindcss from '@tailwindcss/vite'
// https://vite.dev/config/
export default defineConfig({
  plugins: [react(), tailwindcss()],

})
</file>

<file path="src/App.css">
/* * {
  margin: 10px;
  padding: 10px;
  box-sizing: border-box;
}

#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.app {
  outline: 2px solid black;
}

header {
  outline: 2px solid red;
}
.search {
  outline: 2px solid green;
}

.content-list {
  outline: 2px solid blue;
}
.content-card {
  outline: 2px solid yellow;
} */
</file>

<file path="src/index.css">
@import "tailwindcss";
</file>

<file path="src/main.jsx">
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import { BrowserRouter } from "react-router-dom";
import './index.css'
import MainComponent from './MainComponent'

createRoot(document.getElementById('root')).render(
  <BrowserRouter>
    <StrictMode>
      <MainComponent />
    </StrictMode>
  </BrowserRouter>,
)
</file>

<file path="src/MainComponent.jsx">
import { Routes, Route } from "react-router-dom";
import App from './App'
import Test from "./Test";
import SingleMoviePage from "./SingleMoviePage";

const MainComponent = () => {
    return (
        <div className="App">

            <Routes>
                <Route path="/" element={<App />} />
                <Route path='/test' element={<Test />} />
                <Route path="/shows/:show_id" element={<SingleMoviePage />} />

            </Routes>
        </div>
    );
};
export default MainComponent;
</file>

<file path="src/Sort.jsx">
import Box from '@mui/material/Box';
import InputLabel from '@mui/material/InputLabel';
import MenuItem from '@mui/material/MenuItem';
import FormControl from '@mui/material/FormControl';
import Select from '@mui/material/Select';


import { useState } from "react";
const Sort = ({ setMovies, movies, resetMovies }) => {

    const [sortValue, setSort] = useState('')

    function handleSort(event) {
        event.preventDefault();
        setSort(event.target.value)


        if (event.target.value === "none") {

            resetMovies();
            return;
        }
        let moviesCopy = [...movies]
        if (event.target.value === "newest") {
            console.log(movies[0].show.premiered)
            moviesCopy.sort((a, b) => {
                const dateA = new Date(a.show.premiered);
                const dateB = new Date(b.show.premiered);
                return dateB - dateA
            })
        } else if (event.target.value === "oldest") {
            moviesCopy.sort((a, b) => {

                const dateA = a.show.premiered ? new Date(a.show.premiered) : new Date(0);
                const dateB = b.show.premiered ? new Date(b.show.premiered) : new Date(0);
                return dateA - dateB;
            });
        }
        else if (event.target.value === "oldest") {
            moviesCopy.sort((a, b) => {

                const dateA = a.show.premiered ? new Date(a.show.premiered) : new Date(0);
                const dateB = b.show.premiered ? new Date(b.show.premiered) : new Date(0);
                return dateA - dateB;
            });
        } else if (event.target.value === "highest_rated") {
            moviesCopy.sort((a, b) => {

                const ratingA = a.show.rating?.average || 0;
                const ratingB = b.show.rating?.average || 0;
                return ratingB - ratingA;
            });
        } else if (event.target.value === 'lowest_rated') {
            moviesCopy.sort((a, b) => {

                const ratingA = a.show.rating?.average || 0;
                const ratingB = b.show.rating?.average || 0;
                return ratingA - ratingB;
            });
        }
        setMovies(moviesCopy);
    }


    return (
        <Box sx={{ minWidth: 120 }}>
            <FormControl fullWidth sx={{ fontSize: '18', fontWeight: '1000' }} >
                <InputLabel id="sort-selector" sx={{ fontSize: '24', fontWeight: '1000' }}>Select Sort Value</InputLabel>

                <Select
                    labelId="sort-selector"
                    id="demo-simple-select"
                    value={sortValue}
                    label="None"
                    onChange={handleSort}
                >


                    <MenuItem value={'none'}>None</MenuItem>
                    <MenuItem value={'newest'}>Newest Fist</MenuItem>
                    <MenuItem value={'oldest'}>Oldest First</MenuItem>
                    <MenuItem value={'highest_rated'}>Highest Rated</MenuItem>
                    <MenuItem value={'lowest_rated'}>Lowest Rated</MenuItem>

                </Select>
            </FormControl>
        </Box>
    )

}



export default Sort
</file>

<file path="src/Header.jsx">
import { Typography, Box } from "@mui/material";


function Header() {
    return (
        <Box component="header" sx={{ textAlign: "center", mb: 2, boxShadow: '#2196f3 0px 8px 24px', borderRadius: '16px', border: '2px solid' }}>
            <Typography variant="h1" component="h1">
                TV Maze
            </Typography>
        </Box>
    )
}

export default Header;
</file>

<file path="src/Search.jsx">
import { useState } from "react";
import { Box, TextField, Button } from '@mui/material';

function Search({ setSearchTerm }) {
    const [searchInput, setSearchInput] = useState("");

    const handleChange = (event) => {
        setSearchInput(event.target.value);
    }

    const handleSubmit = (event) => {
        event.preventDefault();
        setSearchTerm(searchInput);
        setSearchInput("");
    }

    return (
        <Box component="form" onSubmit={handleSubmit} sx={{
            width: '100%',
            display: 'flex',
            justifyContent: 'center',
            alignItems: 'center',
            my: 3
        }}>
            <Box sx={{
                display: "flex",
                gap: 2,
                width: '100%',
                maxWidth: { xs: '100%', sm: '600px' }
            }}>
                <TextField
                    onChange={handleChange}
                    value={searchInput}
                    fullWidth
                    label="Enter movie name..."
                    id="movie-search"
                    variant="outlined"
                    placeholder="Enter movie name..."
                />
                <Button type="submit" variant="contained" color="success">
                    Search
                </Button>
            </Box>
        </Box>
    )
}

export default Search;
</file>

<file path="src/MovieCard.jsx">
import Card from '@mui/material/Card';
import CardContent from '@mui/material/CardContent';
import CardMedia from '@mui/material/CardMedia';
import Typography from '@mui/material/Typography';
import CardActionArea from '@mui/material/CardActionArea';




function MovieCard({ movie }) {

    return (

        <Card>
            <CardActionArea>
                <CardMedia
                    component="img"
                    height="400"
                    image={movie.show.image?.medium}
                    alt={movie.show.name}
                />
                <CardContent>

                    <Typography gutterBottom variant="h5" component="div">
                        {movie.show.name}
                    </Typography>
                    <Typography variant="body2" sx={{ color: 'text.secondary' }}>
                        {movie.show.genres && movie.show.genres.length > 0 ? movie.show.genres.join(', ') : 'Genre: unknown'}

                    </Typography>
                </CardContent>
            </CardActionArea>
        </Card>
    )

}
export default MovieCard;
</file>

<file path="package.json">
{
  "name": "fe-react-data-visualisation",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@base-ui-components/react": "^1.0.0-alpha.7",
    "@emotion/react": "^11.14.0",
    "@emotion/styled": "^11.14.0",
    "@mui/joy": "^5.0.0-beta.52",
    "@mui/material": "^6.4.8",
    "@tailwindcss/vite": "^4.1.5",
    "axios": "^1.9.0",
    "bootstrap": "^5.3.3",
    "react": "^19.0.0",
    "react-bootstrap": "^2.10.9",
    "react-dom": "^19.0.0",
    "react-router-dom": "^7.4.0",
    "tailwindcss": "^4.1.5"
  },
  "devDependencies": {
    "@eslint/js": "^9.21.0",
    "@types/react": "^19.0.10",
    "@types/react-dom": "^19.0.4",
    "@vitejs/plugin-react": "^4.3.4",
    "eslint": "^9.21.0",
    "eslint-plugin-react-hooks": "^5.1.0",
    "eslint-plugin-react-refresh": "^0.4.19",
    "globals": "^15.15.0",
    "vite": "^6.2.0"
  }
}
</file>

<file path="src/App.jsx">
import { useState } from 'react'
import Header from './Header'
import Search from './Search'
import ContentList from './ContentList'
import { Container, Box } from '@mui/material';
import Sort from './Sort';
import FullSchedule from './FullSchedule';
import { Routes, Route } from "react-router-dom";
import SingleMoviePage from './SingleMoviePage';





function App() {
  const [searchTerm, setSearchTerm] = useState("Office")

  const [movies, setMovies] = useState([])

  const [originalMovies, setOriginalMovies] = useState([]);
  const resetMovies = () => {
    setMovies([...originalMovies]); // office 
  };
  return (
    <Container maxWidth="lg" sx={{ py: 4 }}>
      <Box sx={{ display: 'flex', flexDirection: 'column', gap: 4 }}>
        <Header />
        <Search setSearchTerm={setSearchTerm} />
        <Sort movies={movies} setMovies={setMovies} resetMovies={resetMovies} />
        <ContentList searchTerm={searchTerm} setMovies={setMovies} movies={movies} setOriginalMovies={setOriginalMovies} />


        <FullSchedule />


      </Box>
    </Container>
  )
}

export default App
</file>

<file path="src/ContentList.jsx">
import { useEffect, useState } from "react";
import MovieCard from "./MovieCard";

import { Box } from '@mui/material';
import Grid from '@mui/material/Grid2';
import { Link } from "react-router-dom";

function ContentList({ searchTerm, setMovies, movies, setOriginalMovies }) {


    const [isLoading, setIsLoading] = useState(true);
    const [isError, setIsError] = useState(false);

    useEffect(() => {
        setIsLoading(true);
        setIsError(false);

        fetch(`https://api.tvmaze.com/search/shows?q=${searchTerm}`).then((response) => {
            return (response.json())
        }).then((data) => {
            if (!data || data.length === 0) {
                return Promise.reject({ message: 'Something went wrong' })
            }

            setMovies(data);
            console.log(data)
            setOriginalMovies(data)

        }).catch((err) => {
            setIsError(true)
        }).finally(() => {
            setIsLoading(false)
        })
    }, [searchTerm]);

    if (isLoading) {
        return (
            <div className="content-list">
                <p>Loading... please wait </p>
            </div>
        )

    }

    if (isError) {
        return (
            <div>
                <p>Something went wrong</p>

            </div>
        )
    }

    return (
        <Box sx={{ width: '100%' }}>
            <Grid container spacing={{ xs: 2, md: 3 }} columns={{ xs: 4, sm: 8, md: 12 }}>
                {movies.map((movie) => (
                    <Grid key={movie.show.id} size={{ xs: 2, sm: 4, md: 4 }}>
                        <Link to={`/shows/${movie.show.id}`}>
                            <MovieCard sx={{ height: '150%', boxSizing: 'border-box' }} movie={movie} />
                        </Link>
                    </Grid>
                ))}
            </Grid>
        </Box>


    )
}




export default ContentList;
</file>

<file path="README.md">
# React + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend using TypeScript and enable type-aware lint rules. Check out the [TS template](https://github.com/vitejs/vite/tree/main/packages/create-vite/template-react-ts) to integrate TypeScript and [`typescript-eslint`](https://typescript-eslint.io) in your project.
</file>

</files>
